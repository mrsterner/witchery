package dev.sterner.witchery.fabric.datagen.recipe

import dev.sterner.witchery.Witchery
import dev.sterner.witchery.block.ritual.CommandType
import dev.sterner.witchery.recipe.ritual.RitualRecipe
import dev.sterner.witchery.recipe.ritual.RitualRecipeBuilder
import dev.sterner.witchery.registry.WitcheryBlocks
import dev.sterner.witchery.registry.WitcheryDataComponents
import dev.sterner.witchery.registry.WitcheryEntityTypes
import dev.sterner.witchery.registry.WitcheryItems
import dev.sterner.witchery.ritual.*
import net.minecraft.data.recipes.RecipeOutput
import net.minecraft.world.entity.EntityType
import net.minecraft.world.item.ItemStack
import net.minecraft.world.item.Items
import net.minecraft.world.item.alchemy.PotionContents
import net.minecraft.world.item.alchemy.Potions

object WitcheryRitualRecipeProvider {

    fun ritual(exporter: RecipeOutput) {

        RitualRecipeBuilder.create()
            .addInputItem(Items.ENDER_PEARL)
            .addInputItem(WitcheryItems.REFINED_EVIL.get())
            .addInputItem(WitcheryItems.DEMONS_BLOOD.get())
            .addInputItem(WitcheryItems.PHANTOM_VAPOR.get())
            .addOutputEntity(WitcheryEntityTypes.IMP.get())
            .setTicks(20 * 5)
            .setAltarPower(5000)
            .addMediumPattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("summon_imp"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.ENDER_DEW.get())
            .addInputItem(WitcheryItems.WAYSTONE.get())
            .addInputItem(WitcheryItems.TAGLOCK.get())
            .addInputItem(Items.IRON_INGOT)
            .addCommand(CommandType("tp {taglockPlayerOrEntity} {waystonePos}", CommandType.END))
            .setTicks(20 * 2)
            .setAltarPower(3000)
            .addMediumPattern(WitcheryBlocks.OTHERWHERE_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("teleport_taglock_to_waystone"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.ATTUNED_STONE.get())
            .addInputItem(Items.BONE)
            .addInputItem(Items.ROTTEN_FLESH)
            .addInputItem(WitcheryItems.WOOD_ASH.get())
            .addInputItem(WitcheryItems.SPECTRAL_DUST.get())
            .addOutputItem(WitcheryItems.NECROMANTIC_STONE.get())
            .setAltarPower(1000)
            .addSmallPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .setCelestialConditions(setOf(RitualRecipe.Celestial.NIGHT))
            .save(exporter, Witchery.id("necro_stone"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.WAYSTONE.get())
            .addCommand(CommandType("tp {owner} {waystonePos}", CommandType.END))
            .setTicks(20)
            .addSmallPattern(WitcheryBlocks.OTHERWHERE_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("teleport_owner_to_waystone"))

        RitualRecipeBuilder.create()
            .addInputItem(Items.COPPER_INGOT)
            .addInputItem(WitcheryItems.WOOD_ASH.get())
            .setAltarPower(1000)
            .setTicks(20)
            .addSmallPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .addCommand(CommandType("summon lightning_bolt {chalkPos}", CommandType.END))
            .save(exporter, Witchery.id("summon_lightning"))

        RitualRecipeBuilder.create()
            .addInputItem(Items.COPPER_INGOT)
            .addInputItem(WitcheryItems.WOOD_ASH.get())
            .addInputItem(WitcheryItems.WAYSTONE.get())
            .setAltarPower(2000)
            .setTicks(20)
            .addSmallPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .addCommand(CommandType("summon lightning_bolt {waystonePos}", CommandType.END))
            .save(exporter, Witchery.id("summon_lightning_on_waystone"))

        RitualRecipeBuilder.create()
            .addInputItem(Items.WOODEN_AXE)
            .addInputItem(WitcheryItems.WOOD_ASH.get())
            .setAltarPower(3000)
            .setTicks(20)
            .addCommand(CommandType("time set midnight", CommandType.END))
            .addSmallPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("set_midnight"))

        RitualRecipeBuilder.create()
            .addInputItem(Items.FEATHER)
            .addInputItem(Items.REDSTONE)
            .setAltarPower(20)
            .setInfinite(true)
            .addSmallPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .setCustomRitual(PushMobsRitual())
            .save(exporter, Witchery.id("push_mobs"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.TEAR_OF_THE_GODDESS.get())
            .addInputItem(WitcheryItems.ODOR_OF_PURITY.get())
            .addInputItem(WitcheryItems.WHIFF_OF_MAGIC.get())
            .addInputItem(Items.DIAMOND)
            .addInputItem(WitcheryItems.DEMONS_BLOOD.get())
            .addMediumPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .setAltarPower(8000)
            .setTicks(20)
            .setCustomRitual(BindFamiliarRitual())
            .save(exporter, Witchery.id("bind_familiar"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.BREATH_OF_THE_GODDESS.get())
            .addInputItem(WitcheryItems.HINT_OF_REBIRTH.get())
            .addInputItem(WitcheryItems.WHIFF_OF_MAGIC.get())
            .addMediumPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .setAltarPower(1000)
            .setTicks(20)
            .setCustomRitual(ResurrectFamiliarRitual())
            .save(exporter, Witchery.id("resurrect_familiar"))

        val attuned = ItemStack(WitcheryItems.ATTUNED_STONE.get())
        attuned.set(WitcheryDataComponents.ATTUNED.get(), true)

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.ATTUNED_STONE.get())
            .addInputItem(Items.REDSTONE)
            .addInputItem(Items.GLOWSTONE_DUST)
            .addInputItem(WitcheryItems.WOOD_ASH.get())
            .addOutputItem(attuned)
            .setAltarPower(2500)
            .addSmallPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("charge_attuned"))


        val broom = ItemStack(WitcheryItems.BROOM.get())
        broom.set(WitcheryDataComponents.HAS_OINTMENT.get(), true)

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.FLYING_OINTMENT.get())
            .addInputItem(WitcheryItems.BROOM.get())
            .addOutputItem(broom)
            .setAltarPower(3000)
            .addSmallAndMediumPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get(), WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("apply_ointment"))

        RitualRecipeBuilder.create()
            .addInputItem(Items.OBSIDIAN)
            .addInputItem(WitcheryItems.QUARTZ_SPHERE.get())
            .addInputItem(WitcheryItems.HAPPENSTANCE_OIL.get())
            .addOutputItem(WitcheryItems.SEER_STONE.get())
            .setAltarPower(2000)
            .addSmallAndMediumPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get(), WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("infuse_seer"))


        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.GHOST_OF_THE_LIGHT.get())
            .setAltarPower(2000)
            .addCommand(CommandType("witchery infusion setAndKill {owner} light", CommandType.END))
            .addSmallAndMediumPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get(), WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("infuse_light"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.NECROMANTIC_SOULBIND.get())
            .setAltarPower(4000)
            .addCommand(CommandType("witchery infusion setAndKill {owner} necro", CommandType.END))
            .addSmallAndMediumPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get(), WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("infuse_necromancy"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.SPIRIT_OF_OTHERWHERE.get())
            .setAltarPower(2000)
            .addCommand(CommandType("witchery infusion setAndKill {owner} otherwhere", CommandType.END))
            .addSmallAndMediumPattern(
                WitcheryBlocks.OTHERWHERE_CHALK_BLOCK.get(),
                WitcheryBlocks.OTHERWHERE_CHALK_BLOCK.get()
            )
            .save(exporter, Witchery.id("infuse_otherwhere"))

        RitualRecipeBuilder.create()
            .addInputItem(PotionContents.createItemStack(Items.POTION, Potions.STRONG_REGENERATION))
            .setAltarPower(40)
            .addCommand(CommandType("witchery infusion increase {owner} 1", CommandType.TICK))
            .setInfinite(true)
            .addSmallAndMediumPattern(
                WitcheryBlocks.RITUAL_CHALK_BLOCK.get(),
                WitcheryBlocks.OTHERWHERE_CHALK_BLOCK.get()
            )
            .save(exporter, Witchery.id("rite_of_charging_infusion"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.DROP_OF_LUCK.get())
            .addInputItem(Items.PORKCHOP)
            .addInputItem(Items.GOLD_INGOT)
            .addInputItem(WitcheryItems.ARTHANA.get())
            .setAltarPower(2000)
            .addSmallPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .addOutputEntity(WitcheryEntityTypes.SPECTRAL_PIG.get())
            .save(exporter, Witchery.id("summon_spectral_pig"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.REFINED_EVIL.get())
            .addInputItem(Items.BLAZE_POWDER)
            .addInputItem(Items.ENDER_PEARL)
            .addInputEntity(EntityType.VILLAGER)
            .setAltarPower(3000)
            .addLargePattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .addOutputEntity(WitcheryEntityTypes.DEMON.get())
            .save(exporter, Witchery.id("summon_demon"))

        RitualRecipeBuilder.create()
            .addInputItem(Items.WITHER_SKELETON_SKULL)
            .addInputItem(WitcheryItems.PHANTOM_VAPOR.get())
            .addInputItem(Items.ENDER_PEARL)
            .addInputEntity(EntityType.VILLAGER)
            .setAltarPower(4000)
            .addMediumAndLargePattern(
                WitcheryBlocks.INFERNAL_CHALK_BLOCK.get(),
                WitcheryBlocks.INFERNAL_CHALK_BLOCK.get()
            )
            .addOutputEntity(EntityType.WITHER)
            .save(exporter, Witchery.id("summon_wither"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.PHANTOM_VAPOR.get())
            .addInputItem(WitcheryItems.EXHALE_OF_THE_HORNED_ONE.get())
            .addInputItem(Items.MAGMA_CREAM)
            .addInputItem(WitcheryItems.ARTHANA.get())
            .addInputItem(Items.FERMENTED_SPIDER_EYE)
            .setAltarPower(2000)
            .addSmallPattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .addOutputEntity(EntityType.WITCH)
            .save(exporter, Witchery.id("summon_witch"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.SPECTRAL_DUST.get())
            .addInputItem(WitcheryItems.MELLIFLUOUS_HUNGER.get())
            .addInputItem(WitcheryItems.NECROMANTIC_STONE.get())
            .addInputItem(WitcheryItems.ARTHANA.get())
            .addInputItem(Items.GUNPOWDER)
            .setAltarPower(5000)
            .addCommand(CommandType("witchery manifestation set {owner} true", CommandType.END))
            .addSmallPattern(WitcheryBlocks.OTHERWHERE_CHALK_BLOCK.get())
            .save(exporter, Witchery.id("manifestation"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.ATTUNED_STONE.get())
            .addInputItem(WitcheryItems.NECROMANTIC_STONE.get())
            .addInputItem(WitcheryItems.ARTHANA.get())
            .setAltarPower(6000)
            .addMediumPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .setCustomRitual(BindSpectralCreaturesRitual())
            .setTicks(20)
            .save(exporter, Witchery.id("bind_spectral_creatures"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.TAGLOCK.get())
            .addInputItem(WitcheryItems.EXHALE_OF_THE_HORNED_ONE.get())
            .addInputItem(WitcheryItems.WOLFSBANE.get())
            .addInputItem(WitcheryItems.TONGUE_OF_DOG.get())
            .addInputItem(Items.AMETHYST_SHARD)
            .setCelestialConditions(setOf(RitualRecipe.Celestial.FULL_MOON))
            .addInputItem(WitcheryItems.BREW_OF_THE_GROTESQUE.get())
            .addCommand(CommandType("witchery werewolf level try_curse {taglockPlayerOrEntity}", CommandType.END))
            .setAltarPower(10000)
            .setCovenCount(6)
            .addMediumPattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .setTicks(20)
            .save(exporter, Witchery.id("curse_of_the_wolf"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.TAGLOCK.get())
            .addInputItem(WitcheryItems.EXHALE_OF_THE_HORNED_ONE.get())
            .addInputItem(Items.POISONOUS_POTATO)
            .addInputItem(Items.SUGAR)
            .setWeather(RitualRecipe.Weather.STORM)
            .addInputItem(WitcheryItems.BREW_OF_THE_GROTESQUE.get())
            .addMediumPattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .setAltarPower(2000)
            .setTicks(20)
            .addCommand(CommandType("witchery curse apply {taglockPlayer} witchery:insanity", CommandType.END))
            .save(exporter, Witchery.id("curse_of_insanity"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.TAGLOCK.get())
            .addInputItem(WitcheryItems.EXHALE_OF_THE_HORNED_ONE.get())
            .addInputItem(WitcheryItems.VOODOO_PROTECTION_POPPET.get())
            .addInputItem(Items.BLAZE_POWDER)
            .addInputItem(WitcheryItems.BREW_OF_THE_GROTESQUE.get())
            .requireCat()
            .addMediumPattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .setAltarPower(7000)
            .setTicks(20)
            .addCommand(CommandType("witchery curse apply {taglockPlayer} witchery:corrupt_poppet", CommandType.END))
            .save(exporter, Witchery.id("curse_of_corrupt_poppet"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.TAGLOCK.get())
            .addInputItem(WitcheryItems.EXHALE_OF_THE_HORNED_ONE.get())
            .addInputItem(Items.FERMENTED_SPIDER_EYE)
            .addInputItem(Items.GUNPOWDER)
            .addInputItem(WitcheryItems.BREW_OF_THE_GROTESQUE.get())
            .setWeather(RitualRecipe.Weather.STORM)
            .addMediumPattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .setAltarPower(2000)
            .setTicks(20)
            .addCommand(CommandType("witchery curse apply {taglockPlayer} witchery:misfortune", CommandType.END))
            .save(exporter, Witchery.id("curse_of_misfortune"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.TAGLOCK.get())
            .addInputItem(WitcheryItems.EXHALE_OF_THE_HORNED_ONE.get())
            .addInputItem(WitcheryItems.DEMONS_BLOOD.get())
            .addInputItem(Items.BLAZE_ROD)
            .addInputItem(WitcheryItems.BREW_OF_THE_GROTESQUE.get())
            .addMediumPattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .setAltarPower(2000)
            .setTicks(20)
            .addCommand(CommandType("witchery curse apply {taglockPlayer} witchery:overheating", CommandType.END))
            .save(exporter, Witchery.id("curse_of_overheating"))

        RitualRecipeBuilder.create()
            .addInputItem(WitcheryItems.TAGLOCK.get())
            .addInputItem(WitcheryItems.EXHALE_OF_THE_HORNED_ONE.get())
            .addInputItem(Items.INK_SAC)
            .addInputItem(Items.NETHER_WART)
            .addInputItem(WitcheryItems.BREW_OF_THE_GROTESQUE.get())
            .addMediumPattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .setWeather(RitualRecipe.Weather.STORM)
            .setAltarPower(2000)
            .setTicks(20)
            .addCommand(CommandType("witchery curse apply {taglockPlayer} witchery:sinking", CommandType.END))
            .save(exporter, Witchery.id("curse_of_sinking"))

        RitualRecipeBuilder.create()
            .setAltarPower(2000)
            .addInputItem(WitcheryItems.TAGLOCK.get())
            .addInputItem(WitcheryItems.BREATH_OF_THE_GODDESS.get())
            .addInputItem(WitcheryItems.BREW_OF_LOVE.get())
            .addMediumPattern(WitcheryBlocks.RITUAL_CHALK_BLOCK.get())
            .setTicks(20)
            .setCustomRitual(RemoveCurseRitual())
            .save(exporter, Witchery.id("remove_curse"))

        RitualRecipeBuilder.create()
            .setAltarPower(6000)
            .addInputItem(WitcheryItems.FOUL_FUME.get())
            .addInputItem(Items.ROTTEN_FLESH)
            .addInputItem(WitcheryItems.BELLADONNA_FLOWER.get())
            .addInputItem(WitcheryItems.REEK_OF_MISFORTUNE.get())
            .addInputEntity(EntityType.ZOMBIE)
            .addLargePattern(WitcheryBlocks.INFERNAL_CHALK_BLOCK.get())
            .setTicks(20 * 10)
            .setCustomRitual(RotRitual())
            .save(exporter, Witchery.id("rot"))
    }
}